<b>Python</b> is a <a href="/wiki/High-level_programming_language" title="High-level programming language">high-level</a>, <a href="/wiki/General-purpose_programming_language" title="General-purpose programming language">general-purpose programming language</a>. Its design philosophy emphasizes <a href="/wiki/Code_readability" class="mw-redirect" title="Code readability">code readability</a> with the use of <a href="/wiki/Off-side_rule" title="Off-side rule">significant indentation</a>.<sup id="cite_ref-AutoNT-7_31-0" class="reference"><a href="#cite_note-AutoNT-7-31">&#91;31&#93;</a></sup>

Python is <a href="/wiki/Type_system#DYNAMIC" title="Type system">dynamically typed</a> and <a href="/wiki/Garbage_collection_(computer_science)" title="Garbage collection (computer science)">garbage-collected</a>. It supports multiple <a href="/wiki/Programming_paradigm" title="Programming paradigm">programming paradigms</a>, including <a href="/wiki/Structured_programming" title="Structured programming">structured</a> (particularly <a href="/wiki/Procedural_programming" title="Procedural programming">procedural</a>), <a href="/wiki/Object-oriented_programming" title="Object-oriented programming">object-oriented</a> and <a href="/wiki/Functional_programming" title="Functional programming">functional programming</a>. It is often described as a "batteries included" language due to its comprehensive <a href="/wiki/Standard_library" title="Standard library">standard library</a>.<sup id="cite_ref-About_32-0" class="reference"><a href="#cite_note-About-32">&#91;32&#93;</a></sup><sup id="cite_ref-33" class="reference"><a href="#cite_note-33">&#91;33&#93;</a></sup>

<a href="/wiki/Guido_van_Rossum" title="Guido van Rossum">Guido van Rossum</a> began working on Python in the late 1980s as a successor to the <a href="/wiki/ABC_(programming_language)" title="ABC (programming language)">ABC programming language</a> and first released it in 1991 as Python&#160;0.9.0.<sup id="cite_ref-34" class="reference"><a href="#cite_note-34">&#91;34&#93;</a></sup> Python&#160;2.0 was released in 2000. Python&#160;3.0, released in 2008, was a major revision not completely <a href="/wiki/Backward_compatibility" title="Backward compatibility">backward-compatible</a> with earlier versions. Python&#160;2.7.18, released in 2020, was the last release of Python&#160;2.<sup id="cite_ref-35" class="reference"><a href="#cite_note-35">&#91;35&#93;</a></sup>

Python consistently ranks as one of the most popular programming languages, and has gained widespread use in the <a href="/wiki/Machine_learning" title="Machine learning">machine learning</a> community.<sup id="cite_ref-36" class="reference"><a href="#cite_note-36">&#91;36&#93;</a></sup><sup id="cite_ref-37" class="reference"><a href="#cite_note-37">&#91;37&#93;</a></sup><sup id="cite_ref-tiobecurrent_38-0" class="reference"><a href="#cite_note-tiobecurrent-38">&#91;38&#93;</a></sup><sup id="cite_ref-39" class="reference"><a href="#cite_note-39">&#91;39&#93;</a></sup>

Python was conceived in the late 1980s<sup id="cite_ref-venners-interview-pt-1_40-0" class="reference"><a href="#cite_note-venners-interview-pt-1-40">&#91;40&#93;</a></sup> by <a href="/wiki/Guido_van_Rossum" title="Guido van Rossum">Guido van Rossum</a> at <a href="/wiki/Centrum_Wiskunde_%26_Informatica" title="Centrum Wiskunde &amp; Informatica">Centrum Wiskunde &amp; Informatica</a> (CWI) in the <a href="/wiki/Netherlands" title="Netherlands">Netherlands</a> as a successor to the <a href="/wiki/ABC_(programming_language)" title="ABC (programming language)">ABC programming language</a>, which was inspired by <a href="/wiki/SETL" title="SETL">SETL</a>,<sup id="cite_ref-AutoNT-12_41-0" class="reference"><a href="#cite_note-AutoNT-12-41">&#91;41&#93;</a></sup> capable of <a href="/wiki/Exception_handling" title="Exception handling">exception handling</a> and interfacing with the <a href="/wiki/Amoeba_(operating_system)" title="Amoeba (operating system)">Amoeba</a> operating system.<sup id="cite_ref-faq-created_10-1" class="reference"><a href="#cite_note-faq-created-10">&#91;10&#93;</a></sup> Its implementation began in December&#160;1989.<sup id="cite_ref-timeline-of-python_42-0" class="reference"><a href="#cite_note-timeline-of-python-42">&#91;42&#93;</a></sup> Van Rossum shouldered sole responsibility for the project, as the lead developer, until 12 July 2018, when he announced his "permanent vacation" from his responsibilities as Python's "<a href="/wiki/Benevolent_dictator_for_life" title="Benevolent dictator for life">benevolent dictator for life</a>", a title the Python community bestowed upon him to reflect his long-term commitment as the project's chief decision-maker.<sup id="cite_ref-lj-bdfl-resignation_43-0" class="reference"><a href="#cite_note-lj-bdfl-resignation-43">&#91;43&#93;</a></sup> In January&#160;2019, active Python core developers elected a five-member Steering Council to lead the project.<sup id="cite_ref-44" class="reference"><a href="#cite_note-44">&#91;44&#93;</a></sup><sup id="cite_ref-45" class="reference"><a href="#cite_note-45">&#91;45&#93;</a></sup>

Python 2.0 was released on 16 October 2000, with many major new features such as <a href="/wiki/List_comprehension" title="List comprehension">list comprehensions</a>, <a href="/wiki/Cycle_detection" title="Cycle detection">cycle-detecting</a> garbage collection, <a href="/wiki/Reference_counting" title="Reference counting">reference counting</a>, and <a href="/wiki/Unicode" title="Unicode">Unicode</a> support.<sup id="cite_ref-newin-2.0_46-0" class="reference"><a href="#cite_note-newin-2.0-46">&#91;46&#93;</a></sup> Python&#160;3.0, released on 3 December 2008, with many of its major features <a href="/wiki/Backporting" title="Backporting">backported</a> to Python&#160;2.6.x<sup id="cite_ref-pep-3000_47-0" class="reference"><a href="#cite_note-pep-3000-47">&#91;47&#93;</a></sup> and 2.7.x. Releases of Python&#160;3 include the <code>2to3</code> utility, which automates the translation of Python&#160;2 code to Python&#160;3.<sup id="cite_ref-48" class="reference"><a href="#cite_note-48">&#91;48&#93;</a></sup>

Python 2.7's <a href="/wiki/End-of-life_product" title="End-of-life product">end-of-life</a> was initially set for 2015, then postponed to 2020 out of concern that a large body of existing code could not easily be forward-ported to Python&#160;3.<sup id="cite_ref-49" class="reference"><a href="#cite_note-49">&#91;49&#93;</a></sup><sup id="cite_ref-50" class="reference"><a href="#cite_note-50">&#91;50&#93;</a></sup> No further security patches or other improvements will be released for it.<sup id="cite_ref-51" class="reference"><a href="#cite_note-51">&#91;51&#93;</a></sup><sup id="cite_ref-52" class="reference"><a href="#cite_note-52">&#91;52&#93;</a></sup> Currently only 3.8 and later are supported (2023 security issues were fixed in e.g. 3.7.17, the final 3.7.x release<sup id="cite_ref-53" class="reference"><a href="#cite_note-53">&#91;53&#93;</a></sup>). While Python 2.7 and older is officially unsupported, a different unofficial Python implementation, <a href="/wiki/PyPy" title="PyPy">PyPy</a>, continues to support Python 2, i.e. "2.7.18+" (plus 3.9 and 3.10), with the plus meaning (at least some) "<a href="/wiki/Backporting" title="Backporting">backported</a> security updates".<sup id="cite_ref-54" class="reference"><a href="#cite_note-54">&#91;54&#93;</a></sup>

In 2021 (and again twice in 2022), security updates were expedited, since all Python versions were insecure (including 2.7<sup id="cite_ref-55" class="reference"><a href="#cite_note-55">&#91;55&#93;</a></sup>) because of security issues leading to possible <a href="/wiki/Remote_code_execution" class="mw-redirect" title="Remote code execution">remote code execution</a><sup id="cite_ref-56" class="reference"><a href="#cite_note-56">&#91;56&#93;</a></sup> and <a href="/wiki/Cache_poisoning" title="Cache poisoning">web-cache poisoning</a>.<sup id="cite_ref-57" class="reference"><a href="#cite_note-57">&#91;57&#93;</a></sup> In 2022, Python&#160;3.10.4 and 3.9.12 were expedited<sup id="cite_ref-58" class="reference"><a href="#cite_note-58">&#91;58&#93;</a></sup> and 3.8.13, because of many security issues.<sup id="cite_ref-59" class="reference"><a href="#cite_note-59">&#91;59&#93;</a></sup> When Python&#160;3.9.13 was released in May 2022, it was announced that the 3.9 series (joining the older series 3.8 and 3.7) would only receive security fixes in the future.<sup id="cite_ref-60" class="reference"><a href="#cite_note-60">&#91;60&#93;</a></sup> On 7 September 2022, four new releases were made due to a potential <a href="/wiki/Denial-of-service_attack" title="Denial-of-service attack">denial-of-service attack</a>: 3.10.7, 3.9.14, 3.8.14, and 3.7.14.<sup id="cite_ref-61" class="reference"><a href="#cite_note-61">&#91;61&#93;</a></sup><sup id="cite_ref-62" class="reference"><a href="#cite_note-62">&#91;62&#93;</a></sup>

As of October&#160;2023,<sup class="plainlinks noexcerpt noprint asof-tag update" style="display:none;"><a class="external text" href="https://en.wikipedia.org/w/index.php?title=Python_(programming_language)&amp;action=edit">&#91;update&#93;</a></sup> Python 3.12 is the stable release, and 3.12 and 3.11 are the only versions with active (as opposed to just security) support. Notable changes in 3.11 from 3.10 include increased program execution speed and improved error reporting.<sup id="cite_ref-63" class="reference"><a href="#cite_note-63">&#91;63&#93;</a></sup>

Python 3.12 adds syntax (and in fact every Python since at least 3.5 adds some syntax) to the language, the new (soft) keyword <code>type</code> (recent releases have added a lot of typing support e.g. new type union operator in 3.10), and 3.11 for exception handling, and 3.10 the <code>match</code> and <code>case</code> (soft) keywords, for structural <a href="/wiki/Pattern_matching" title="Pattern matching">pattern matching</a> statements. Python 3.12 also drops outdated modules and functionality, and future versions will too, see below in <a href="#Development">Development</a> section.

Python 3.11 claims to be between 10 and 60% faster than Python 3.10, and Python 3.12 adds another 5% on top of that. It also has improved error messages, and many other changes.

Since 27&#160;June&#160;2023<sup class="plainlinks noexcerpt noprint asof-tag update" style="display:none;"><a class="external text" href="https://en.wikipedia.org/w/index.php?title=Python_(programming_language)&amp;action=edit">&#91;update&#93;</a></sup>, Python 3.8 is the oldest supported version of Python (albeit in the 'security support' phase), due to Python 3.7 reaching <a href="/wiki/End-of-life_product" title="End-of-life product">end-of-life</a>.<sup id="cite_ref-64" class="reference"><a href="#cite_note-64">&#91;64&#93;</a></sup>

Python is a <a href="/wiki/Multi-paradigm_programming_language" class="mw-redirect" title="Multi-paradigm programming language">multi-paradigm programming language</a>. <a href="/wiki/Object-oriented_programming" title="Object-oriented programming">Object-oriented programming</a> and <a href="/wiki/Structured_programming" title="Structured programming">structured programming</a> are fully supported, and many of their features support functional programming and <a href="/wiki/Aspect-oriented_programming" title="Aspect-oriented programming">aspect-oriented programming</a> (including <a href="/wiki/Metaprogramming" title="Metaprogramming">metaprogramming</a><sup id="cite_ref-AutoNT-13_65-0" class="reference"><a href="#cite_note-AutoNT-13-65">&#91;65&#93;</a></sup> and <a href="/wiki/Metaobject" title="Metaobject">metaobjects</a>).<sup id="cite_ref-AutoNT-14_66-0" class="reference"><a href="#cite_note-AutoNT-14-66">&#91;66&#93;</a></sup> Many other paradigms are supported via extensions, including <a href="/wiki/Design_by_contract" title="Design by contract">design by contract</a><sup id="cite_ref-AutoNT-15_67-0" class="reference"><a href="#cite_note-AutoNT-15-67">&#91;67&#93;</a></sup><sup id="cite_ref-AutoNT-16_68-0" class="reference"><a href="#cite_note-AutoNT-16-68">&#91;68&#93;</a></sup> and <a href="/wiki/Logic_programming" title="Logic programming">logic programming</a>.<sup id="cite_ref-AutoNT-17_69-0" class="reference"><a href="#cite_note-AutoNT-17-69">&#91;69&#93;</a></sup>

Python uses <a href="/wiki/Dynamic_typing" class="mw-redirect" title="Dynamic typing">dynamic typing</a> and a combination of <a href="/wiki/Reference_counting" title="Reference counting">reference counting</a> and a cycle-detecting garbage collector for <a href="/wiki/Memory_management" title="Memory management">memory management</a>.<sup id="cite_ref-Reference_counting_70-0" class="reference"><a href="#cite_note-Reference_counting-70">&#91;70&#93;</a></sup> It uses dynamic <a href="/wiki/Name_resolution_(programming_languages)" title="Name resolution (programming languages)">name resolution</a> (<a href="/wiki/Late_binding" title="Late binding">late binding</a>), which binds method and variable names during program execution.

Its design offers some support for functional programming in the <a href="/wiki/Lisp_(programming_language)" title="Lisp (programming language)">Lisp</a> tradition. It has <code>filter</code>,<code>map</code>and<code>reduce</code> functions; <a href="/wiki/List_comprehension" title="List comprehension">list comprehensions</a>, <a href="/wiki/Associative_array" title="Associative array">dictionaries</a>, sets, and <a href="/wiki/Generator_(computer_programming)" title="Generator (computer programming)">generator</a> expressions.<sup id="cite_ref-AutoNT-59_71-0" class="reference"><a href="#cite_note-AutoNT-59-71">&#91;71&#93;</a></sup> The standard library has two modules (<code>itertools</code> and <code>functools</code>) that implement functional tools borrowed from <a href="/wiki/Haskell" title="Haskell">Haskell</a> and <a href="/wiki/Standard_ML" title="Standard ML">Standard ML</a>.<sup id="cite_ref-AutoNT-18_72-0" class="reference"><a href="#cite_note-AutoNT-18-72">&#91;72&#93;</a></sup>

Its core philosophy is summarized in the <a href="/wiki/Zen_of_Python" title="Zen of Python">Zen of Python</a> (PEP 20), which includes <a href="/wiki/Aphorism" title="Aphorism">aphorisms</a> such as:<sup id="cite_ref-PEP20_73-0" class="reference"><a href="#cite_note-PEP20-73">&#91;73&#93;</a></sup>

However, Python features regularly violate these principles and received criticism for adding unnecessary language bloat.<sup id="cite_ref-Python-Changes-2014_74-0" class="reference"><a href="#cite_note-Python-Changes-2014-74">&#91;74&#93;</a></sup><sup id="cite_ref-Python-is-not-a-great-programming-language_75-0" class="reference"><a href="#cite_note-Python-is-not-a-great-programming-language-75">&#91;75&#93;</a></sup> Responses to these criticisms are that the Zen of Python is a guideline rather than a rule.<sup id="cite_ref-Confusion-regarding-a-rule-in-the-Zen-of-Python_76-0" class="reference"><a href="#cite_note-Confusion-regarding-a-rule-in-the-Zen-of-Python-76">&#91;76&#93;</a></sup> New features has been so controversial that Guido van Rossum resigned as Benevolent Dictator for Life following vitriol over the addition of the assignment expression operator in Python 3.8.<sup id="cite_ref-The-Most-Controversial-Python-Walrus-Operator_77-0" class="reference"><a href="#cite_note-The-Most-Controversial-Python-Walrus-Operator-77">&#91;77&#93;</a></sup><sup id="cite_ref-The-Controversy-Behind-The-Walrus-Operator-in-Python_78-0" class="reference"><a href="#cite_note-The-Controversy-Behind-The-Walrus-Operator-in-Python-78">&#91;78&#93;</a></sup>

Nevertheless, rather than building all of its functionality into its core, Python was designed to be highly <a href="/wiki/Extensibility" title="Extensibility">extensible</a> via modules. This compact modularity has made it particularly popular as a means of adding programmable interfaces to existing applications. Van Rossum's vision of a small core language with a large standard library and easily extensible interpreter stemmed from his frustrations with <a href="/wiki/ABC_(programming_language)" title="ABC (programming language)">ABC</a>, which espoused the opposite approach.<sup id="cite_ref-venners-interview-pt-1_40-1" class="reference"><a href="#cite_note-venners-interview-pt-1-40">&#91;40&#93;</a></sup>

Python claims to strive for a simpler, less-cluttered syntax and grammar while giving developers a choice in their coding methodology. In contrast to <a href="/wiki/Perl" title="Perl">Perl</a>'s "<a href="/wiki/There_is_more_than_one_way_to_do_it" class="mw-redirect" title="There is more than one way to do it">there is more than one way to do it</a>" motto, Python embraces a "there should be one—and preferably only one—obvious way to do it."  philosophy.<sup id="cite_ref-PEP20_73-1" class="reference"><a href="#cite_note-PEP20-73">&#91;73&#93;</a></sup> In practice, however, Python provides many ways to achieve the same task. There are, for example, at least three ways to format a string literal, with no certainty as to which one a programmer should use.<sup id="cite_ref-Python-String-Formatting-Best-Practices_79-0" class="reference"><a href="#cite_note-Python-String-Formatting-Best-Practices-79">&#91;79&#93;</a></sup> <a href="/wiki/Alex_Martelli" title="Alex Martelli">Alex Martelli</a>, a <a href="/wiki/Fellow" title="Fellow">Fellow</a> at the <a href="/wiki/Python_Software_Foundation" title="Python Software Foundation">Python Software Foundation</a> and Python book author, wrote: "To describe something as 'clever' is <i>not</i> considered a compliment in the Python culture."<sup id="cite_ref-AutoNT-19_80-0" class="reference"><a href="#cite_note-AutoNT-19-80">&#91;80&#93;</a></sup>

Python's developers usually strive to avoid <a href="/wiki/Premature_optimization" class="mw-redirect" title="Premature optimization">premature optimization</a> and reject patches to non-critical parts of the <a href="/wiki/CPython" title="CPython">CPython</a> reference implementation that would offer marginal increases in speed at the cost of clarity.<sup id="cite_ref-AutoNT-20_81-0" class="reference"><a href="#cite_note-AutoNT-20-81">&#91;81&#93;</a></sup> Execution speed can be improved by moving speed-critical functions to extension modules written in languages such as C, or by using a <a href="/wiki/Just-in-time_compilation" title="Just-in-time compilation">just-in-time compiler</a> like <a href="/wiki/PyPy" title="PyPy">PyPy</a>. It is also possible to <a href="#Cross-compilers_to_other_languages">cross-compile to other languages</a>, but it either doesn't provide the full speed-up that might be expected, since Python is a very dynamic language, or a restricted subset of Python is compiled, and possibly semantics are slightly changed.<sup id="cite_ref-PyJL_82-0" class="reference"><a href="#cite_note-PyJL-82">&#91;82&#93;</a></sup>

Python's developers aim for it to be fun to use. This is reflected in its name—a tribute to the British comedy group <a href="/wiki/Monty_Python" title="Monty Python">Monty Python</a><sup id="cite_ref-whyname_83-0" class="reference"><a href="#cite_note-whyname-83">&#91;83&#93;</a></sup>—and in occasionally playful approaches to tutorials and reference materials, such as the use of the terms "spam" and "eggs" (a reference to <a href="/wiki/Spam_(Monty_Python)" class="mw-redirect" title="Spam (Monty Python)">a Monty Python sketch</a>) in examples, instead of the often-used <a href="/wiki/Foobar" title="Foobar">"foo" and "bar"</a>.<sup id="cite_ref-84" class="reference"><a href="#cite_note-84">&#91;84&#93;</a></sup><sup id="cite_ref-85" class="reference"><a href="#cite_note-85">&#91;85&#93;</a></sup>A common <a href="/wiki/Neologism" title="Neologism">neologism</a> in the Python community is <i>pythonic</i>, which has a wide range of meanings related to program style. "Pythonic" code may use Python <a href="/wiki/Programming_idiom" title="Programming idiom">idioms</a> well, be natural or show fluency in the language, or conform with Python's minimalist philosophy and emphasis on readability. Code that is difficult to understand or reads like a rough transcription from another programming language is called <i>unpythonic</i>.<sup id="cite_ref-86" class="reference"><a href="#cite_note-86">&#91;86&#93;</a></sup><sup id="cite_ref-87" class="reference"><a href="#cite_note-87">&#91;87&#93;</a></sup>

Python is meant to be an easily readable language. Its formatting is visually uncluttered and often uses English keywords where other languages use punctuation. Unlike many other languages, it does not use <a href="/wiki/Curly_bracket_programming_language" class="mw-redirect" title="Curly bracket programming language">curly brackets</a> to delimit blocks, and semicolons after statements are allowed but rarely used. It has fewer syntactic exceptions and special cases than <a href="/wiki/C_(programming_language)" title="C (programming language)">C</a> or <a href="/wiki/Pascal_(programming_language)" title="Pascal (programming language)">Pascal</a>.<sup id="cite_ref-AutoNT-52_88-0" class="reference"><a href="#cite_note-AutoNT-52-88">&#91;88&#93;</a></sup>

Python uses <a href="/wiki/Whitespace_character" title="Whitespace character">whitespace</a> indentation, rather than <a href="/wiki/Curly_bracket_programming_language" class="mw-redirect" title="Curly bracket programming language">curly brackets</a> or keywords, to delimit <a href="/wiki/Block_(programming)" title="Block (programming)">blocks</a>. An increase in indentation comes after certain statements; a decrease in indentation signifies the end of the current block.<sup id="cite_ref-AutoNT-53_89-0" class="reference"><a href="#cite_note-AutoNT-53-89">&#91;89&#93;</a></sup> Thus, the program's visual structure accurately represents its semantic structure.<sup id="cite_ref-guttag_90-0" class="reference"><a href="#cite_note-guttag-90">&#91;90&#93;</a></sup> This feature is sometimes termed the <a href="/wiki/Off-side_rule" title="Off-side rule">off-side rule</a>. Some other languages use indentation this way; but in most, indentation has no semantic meaning. The recommended indent size is four spaces.<sup id="cite_ref-91" class="reference"><a href="#cite_note-91">&#91;91&#93;</a></sup>

Python's <a href="/wiki/Statement_(computer_science)" title="Statement (computer science)">statements</a> include:

The assignment statement (<code>=</code>) binds a name as a <a href="/wiki/Pointer_(computer_programming)" title="Pointer (computer programming)">reference</a> to a separate, dynamically allocated <a href="/wiki/Object_(computer_science)" title="Object (computer science)">object</a>. Variables may subsequently be rebound at any time to any object. In Python, a variable name is a generic reference holder without a fixed <a href="/wiki/Type_system" title="Type system">data type</a>; however, it always refers to <i>some</i> object with a type. This is called <a href="/wiki/Dynamic_type" class="mw-redirect" title="Dynamic type">dynamic typing</a>—in contrast to <a href="/wiki/Statically-typed" class="mw-redirect" title="Statically-typed">statically-typed</a> languages, where each variable may contain only a value of a certain type.

Python does not support <a href="/wiki/Tail_call" title="Tail call">tail call</a> optimization or <a href="/wiki/First-class_continuations" class="mw-redirect" title="First-class continuations">first-class continuations</a>, and, according to Van Rossum, it never will.<sup id="cite_ref-AutoNT-55_94-0" class="reference"><a href="#cite_note-AutoNT-55-94">&#91;94&#93;</a></sup><sup id="cite_ref-AutoNT-56_95-0" class="reference"><a href="#cite_note-AutoNT-56-95">&#91;95&#93;</a></sup> However, better support for <a href="/wiki/Coroutine" title="Coroutine">coroutine</a>-like functionality is provided by extending Python's <a href="/wiki/Generator_(computer_programming)" title="Generator (computer programming)">generators</a>.<sup id="cite_ref-AutoNT-57_96-0" class="reference"><a href="#cite_note-AutoNT-57-96">&#91;96&#93;</a></sup> Before 2.5, generators were <a href="/wiki/Lazy_evaluation" title="Lazy evaluation">lazy</a> <a href="/wiki/Iterator" title="Iterator">iterators</a>; data was passed unidirectionally out of the generator. From Python&#160;2.5 on, it is possible to pass data back into a generator function; and from version 3.3, it can be passed through multiple stack levels.<sup id="cite_ref-AutoNT-58_97-0" class="reference"><a href="#cite_note-AutoNT-58-97">&#91;97&#93;</a></sup>

Python's <a href="/wiki/Expression_(computer_science)" title="Expression (computer science)">expressions</a> include:

In Python, a distinction between expressions and statements is rigidly enforced, in contrast to languages such as <a href="/wiki/Common_Lisp" title="Common Lisp">Common Lisp</a>, <a href="/wiki/Scheme_(programming_language)" title="Scheme (programming language)">Scheme</a>, or <a href="/wiki/Ruby_(programming_language)" title="Ruby (programming language)">Ruby</a>. This leads to duplicating some functionality. For example:

Statements cannot be a part of an expression—so list and other comprehensions or <a href="/wiki/Lambda_(programming)" class="mw-redirect" title="Lambda (programming)">lambda expressions</a>, all being expressions, cannot contain statements. A particular case is that an assignment statement such as <code class="mw-highlight mw-highlight-lang-python mw-content-ltr" id="" style="" dir="ltr"><span class="n">a</span> <span class="o">=</span> <span class="mi">1</span></code> cannot form part of the conditional expression of a conditional statement. This has the advantage of avoiding a classic C error of mistaking an assignment operator <code>=</code> for an equality operator <code>==</code> in conditions: <code class="mw-highlight mw-highlight-lang-c mw-content-ltr" id="" style="" dir="ltr"><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">c</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">1</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="p">...</span><span class="w"> </span><span class="p">}</span></code> is syntactically valid (but probably unintended) C code, but <code class="mw-highlight mw-highlight-lang-python mw-content-ltr" id="" style="" dir="ltr"><span class="k">if</span> <span class="n">c</span> <span class="o">=</span> <span class="mi">1</span><span class="p">:</span> <span class="o">...</span></code> causes a syntax error in Python.

<a href="/wiki/Method_(programming)" class="mw-redirect" title="Method (programming)">Methods</a> on objects are <a href="/wiki/Function_(programming)" class="mw-redirect" title="Function (programming)">functions</a> attached to the object's class; the syntax <code class="mw-highlight mw-highlight-lang-python mw-content-ltr" id="" style="" dir="ltr"><span class="n">instance</span><span class="o">.</span><span class="n">method</span><span class="p">(</span><span class="n">argument</span><span class="p">)</span></code> is, for normal methods and functions, <a href="/wiki/Syntactic_sugar" title="Syntactic sugar">syntactic sugar</a> for <code class="mw-highlight mw-highlight-lang-python mw-content-ltr" id="" style="" dir="ltr"><span class="n">Class</span><span class="o">.</span><span class="n">method</span><span class="p">(</span><span class="n">instance</span><span class="p">,</span> <span class="n">argument</span><span class="p">)</span></code>. Python methods have an explicit <code><a href="/wiki/This_(computer_programming)" title="This (computer programming)">self</a></code> parameter to access <a href="/wiki/Instance_data" class="mw-redirect" title="Instance data">instance data</a>, in contrast to the implicit self (or <code>this</code>) in some other object-oriented programming languages (e.g., <a href="/wiki/C%2B%2B" title="C++">C++</a>, Java, <a href="/wiki/Objective-C" title="Objective-C">Objective-C</a>, <a href="/wiki/Ruby_(programming_language)" title="Ruby (programming language)">Ruby</a>).<sup id="cite_ref-AutoNT-61_106-0" class="reference"><a href="#cite_note-AutoNT-61-106">&#91;106&#93;</a></sup> Python also provides methods, often called <i>dunder methods</i> (due to their names beginning and ending with double-underscores), to allow user-defined classes to modify how they are handled by native operations including length, comparison, in <a href="/wiki/Arithmetic_operations" class="mw-redirect" title="Arithmetic operations">arithmetic operations</a> and type conversion.<sup id="cite_ref-107" class="reference"><a href="#cite_note-107">&#91;107&#93;</a></sup>

Python uses <a href="/wiki/Duck_typing" title="Duck typing">duck typing</a> and has typed objects but untyped variable names. Type constraints are not checked at <a href="/wiki/Compile_time" title="Compile time">compile time</a>; rather, operations on an object may fail, signifying that it is not of a suitable type. Despite being <a href="/wiki/Type_system#Dynamic_type_checking_and_runtime_type_information" title="Type system">dynamically typed</a>, Python is <a href="/wiki/Strong_and_weak_typing" title="Strong and weak typing">strongly typed</a>, forbidding operations that are not well-defined (for example, adding a number to a string) rather than silently attempting to make sense of them.

Python allows programmers to define their own types using <a href="/wiki/Class_(computer_science)" class="mw-redirect" title="Class (computer science)">classes</a>, most often used for <a href="/wiki/Object-oriented_programming" title="Object-oriented programming">object-oriented programming</a>. New <a href="/wiki/Object_(computer_science)" title="Object (computer science)">instances</a> of classes are constructed by calling the class (for example, <code class="mw-highlight mw-highlight-lang-python mw-content-ltr" id="" style="" dir="ltr"><span class="n">SpamClass</span><span class="p">()</span></code> or <code class="mw-highlight mw-highlight-lang-python mw-content-ltr" id="" style="" dir="ltr"><span class="n">EggsClass</span><span class="p">()</span></code>), and the classes are instances of the <a href="/wiki/Metaclass" title="Metaclass">metaclass</a> <code>type</code> (itself an instance of itself), allowing metaprogramming and <a href="/wiki/Reflection_(computer_science)" class="mw-redirect" title="Reflection (computer science)">reflection</a>.

Before version&#160;3.0, Python had two kinds of classes (both using the same syntax): <i>old-style</i> and <i>new-style</i>,<sup id="cite_ref-classy_108-0" class="reference"><a href="#cite_note-classy-108">&#91;108&#93;</a></sup> current Python versions only support the semantics new style.

Python supports <a href="/wiki/Optional_typing" class="mw-redirect" title="Optional typing">optional type annotations</a>.<sup id="cite_ref-type_hint-PEP_4-1" class="reference"><a href="#cite_note-type_hint-PEP-4">&#91;4&#93;</a></sup><sup id="cite_ref-109" class="reference"><a href="#cite_note-109">&#91;109&#93;</a></sup> These annotations are not enforced by the language, but may be used by external tools such as mypy to catch errors.<sup id="cite_ref-110" class="reference"><a href="#cite_note-110">&#91;110&#93;</a></sup><sup id="cite_ref-111" class="reference"><a href="#cite_note-111">&#91;111&#93;</a></sup> Mypy also supports a Python compiler called mypyc, which leverages type annotations for optimization.<sup id="cite_ref-112" class="reference"><a href="#cite_note-112">&#91;112&#93;</a></sup>

<code class="mw-highlight mw-highlight-lang-python mw-content-ltr" id="" style="" dir="ltr"><span class="mf">1.33333</span></code>

Python has the usual symbols for arithmetic operators (<code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>), the floor division operator <code>//</code> and the <a href="/wiki/Modulo_operation" class="mw-redirect" title="Modulo operation">modulo operation</a> <code>%</code> (where the remainder can be negative,  e.g. <code>4&#160;% -3 == -2</code>). It also has <code>**</code> for <a href="/wiki/Exponentiation" title="Exponentiation">exponentiation</a>, e.g. <code>5**3 == 125</code> and <code>9**0.5 == 3.0</code>, and a matrix‑multiplication operator <code>@</code> .<sup id="cite_ref-116" class="reference"><a href="#cite_note-116">&#91;116&#93;</a></sup> These operators work like in traditional math; with the same <a href="/wiki/Order_of_operations" title="Order of operations">precedence rules</a>, the operators <a href="/wiki/Infix_notation" title="Infix notation">infix</a> (<code>+</code> and <code>-</code> can also be <a href="/wiki/Unary_operation" title="Unary operation">unary</a> to represent positive and negative numbers respectively).

The division between integers produces floating-point results. The behavior of division has changed significantly over time:<sup id="cite_ref-pep0238_117-0" class="reference"><a href="#cite_note-pep0238-117">&#91;117&#93;</a></sup>

In Python terms, <code>/</code> is <i>true division</i> (or simply <i>division</i>), and <code>//</code> is <i>floor division.</i> <code>/</code> before version 3.0 is <i>classic division</i>.<sup id="cite_ref-pep0238_117-1" class="reference"><a href="#cite_note-pep0238-117">&#91;117&#93;</a></sup>

Rounding towards negative infinity, though different from most languages, adds consistency. For instance, it means that the equation <code class="nowrap mw-highlight mw-highlight-lang-python mw-content-ltr" id="" style="" dir="ltr"><span class="p">(</span><span class="n">a</span> <span class="o">+</span> <span class="n">b</span><span class="p">)</span><span class="o">//</span><span class="n">b</span> <span class="o">==</span> <span class="n">a</span><span class="o">//</span><span class="n">b</span> <span class="o">+</span> <span class="mi">1</span></code> is always true. It also means that the equation <code class="nowrap mw-highlight mw-highlight-lang-python mw-content-ltr" id="" style="" dir="ltr"><span class="n">b</span><span class="o">*</span><span class="p">(</span><span class="n">a</span><span class="o">//</span><span class="n">b</span><span class="p">)</span> <span class="o">+</span> <span class="n">a</span><span class="o">%</span><span class="n">b</span> <span class="o">==</span> <span class="n">a</span></code> is valid for both positive and negative values of <code>a</code>. However, maintaining the validity of this equation means that while the result of <code>a%b</code> is, as expected, in the <a href="/wiki/Half-open_interval" class="mw-redirect" title="Half-open interval">half-open interval</a> [0, <i>b</i>), where <code>b</code> is a positive integer, it has to lie in the interval (<i>b</i>, 0] when <code>b</code> is negative.<sup id="cite_ref-AutoNT-62_118-0" class="reference"><a href="#cite_note-AutoNT-62-118">&#91;118&#93;</a></sup>

Python provides a <code>round</code> function for <a href="/wiki/Rounding" title="Rounding">rounding</a> a float to the nearest integer. For <a href="/wiki/Rounding#Tie-breaking" title="Rounding">tie-breaking</a>, Python&#160;3 uses <a href="/wiki/Round_to_even" class="mw-redirect" title="Round to even">round to even</a>: <code>round(1.5)</code> and <code>round(2.5)</code> both produce <code>2</code>.<sup id="cite_ref-AutoNT-64_119-0" class="reference"><a href="#cite_note-AutoNT-64-119">&#91;119&#93;</a></sup> Versions before 3 used <a href="/wiki/Rounding#Rounding_away_from_zero" title="Rounding">round-away-from-zero</a>: <code>round(0.5)</code> is <code>1.0</code>, <code>round(-0.5)</code> is <code>−1.0</code>.<sup id="cite_ref-AutoNT-63_120-0" class="reference"><a href="#cite_note-AutoNT-63-120">&#91;120&#93;</a></sup>

Python allows Boolean expressions with multiple equality relations in a manner that is consistent with general use in mathematics. For example, the expression <code>a &lt; b &lt; c</code> tests whether <code>a</code> is less than <code>b</code> and <code>b</code> is less than <code>c</code>.<sup id="cite_ref-AutoNT-65_121-0" class="reference"><a href="#cite_note-AutoNT-65-121">&#91;121&#93;</a></sup> C-derived languages interpret this expression differently: in C, the expression would first evaluate <code>a &lt; b</code>, resulting in 0 or 1, and that result would then be compared with <code>c</code>.<sup id="cite_ref-CPL_122-0" class="reference"><a href="#cite_note-CPL-122">&#91;122&#93;</a></sup>

Python uses <a href="/wiki/Arbitrary-precision_arithmetic" title="Arbitrary-precision arithmetic">arbitrary-precision arithmetic</a> for all integer operations. The <code>Decimal</code> type/class in the <code>decimal</code> module provides <a href="/wiki/Decimal_floating_point" title="Decimal floating point">decimal floating-point numbers</a> to a pre-defined arbitrary precision and several rounding modes.<sup id="cite_ref-AutoNT-88_123-0" class="reference"><a href="#cite_note-AutoNT-88-123">&#91;123&#93;</a></sup> The <code>Fraction</code> class in the <code>fractions</code> module provides arbitrary precision for <a href="/wiki/Rational_number" title="Rational number">rational numbers</a>.<sup id="cite_ref-124" class="reference"><a href="#cite_note-124">&#91;124&#93;</a></sup>

Due to Python's extensive mathematics library, and the third-party library <a href="/wiki/NumPy" title="NumPy">NumPy</a> that further extends the native capabilities, it is frequently used as a scientific scripting language to aid in problems such as numerical data processing and manipulation.<sup id="cite_ref-125" class="reference"><a href="#cite_note-125">&#91;125&#93;</a></sup><sup id="cite_ref-126" class="reference"><a href="#cite_note-126">&#91;126&#93;</a></sup>

<a href="/wiki/%22Hello,_World!%22_program" title="&quot;Hello, World!&quot; program">"Hello, World!" program</a>:

Program to calculate the <a href="/wiki/Factorial" title="Factorial">factorial</a> of a positive integer:

Python's large standard library<sup id="cite_ref-AutoNT-86_127-0" class="reference"><a href="#cite_note-AutoNT-86-127">&#91;127&#93;</a></sup> provides tools suited to many tasks and is commonly cited as one of its greatest strengths. For Internet-facing applications, many standard formats and protocols such as <a href="/wiki/MIME" title="MIME">MIME</a> and <a href="/wiki/Hypertext_Transfer_Protocol" class="mw-redirect" title="Hypertext Transfer Protocol">HTTP</a> are supported. It includes modules for creating <a href="/wiki/Graphical_user_interface" title="Graphical user interface">graphical user interfaces</a>, connecting to <a href="/wiki/Relational_database" title="Relational database">relational databases</a>, <a href="/wiki/Pseudorandom_number_generator" title="Pseudorandom number generator">generating pseudorandom numbers</a>, arithmetic with arbitrary-precision decimals,<sup id="cite_ref-AutoNT-88_123-1" class="reference"><a href="#cite_note-AutoNT-88-123">&#91;123&#93;</a></sup> manipulating <a href="/wiki/Regular_expression" title="Regular expression">regular expressions</a>, and <a href="/wiki/Unit_testing" title="Unit testing">unit testing</a>.

Some parts of the standard library are covered by specifications—for example, the <a href="/wiki/Web_Server_Gateway_Interface" title="Web Server Gateway Interface">Web Server Gateway Interface</a> (WSGI) implementation <code>wsgiref</code> follows PEP 333<sup id="cite_ref-AutoNT-89_128-0" class="reference"><a href="#cite_note-AutoNT-89-128">&#91;128&#93;</a></sup>—but most are specified by their code, internal documentation, and <a href="/wiki/Test_suite" title="Test suite">test suites</a>. However, because most of the standard library is cross-platform Python code, only a few modules need altering or rewriting for variant implementations.

As of 14&#160;November&#160;2022,<sup class="plainlinks noexcerpt noprint asof-tag update" style="display:none;"><a class="external text" href="https://en.wikipedia.org/w/index.php?title=Python_(programming_language)&amp;action=edit">&#91;update&#93;</a></sup> the <a href="/wiki/Python_Package_Index" title="Python Package Index">Python Package Index</a> (PyPI), the official repository for third-party Python software, contains over 415,000<sup id="cite_ref-Modulecounts_2022_129-0" class="reference"><a href="#cite_note-Modulecounts_2022-129">&#91;129&#93;</a></sup> packages with a wide range of functionality, including:

Most Python implementations (including CPython) include a <a href="/wiki/Read%E2%80%93eval%E2%80%93print_loop" title="Read–eval–print loop">read–eval–print loop</a> (REPL), permitting them to function as a <a href="/wiki/Command_line_interpreter" class="mw-redirect" title="Command line interpreter">command line interpreter</a> for which users enter statements sequentially and receive results immediately.

Python also comes with an <a href="/wiki/Integrated_development_environment" title="Integrated development environment">Integrated development environment (IDE)</a> called <a href="/wiki/IDLE" title="IDLE">IDLE</a>, which is more beginner-oriented.

Other shells, including <a href="/wiki/IDLE" title="IDLE">IDLE</a> and <a href="/wiki/IPython" title="IPython">IPython</a>, add further abilities such as improved auto-completion, session state retention, and <a href="/wiki/Syntax_highlighting" title="Syntax highlighting">syntax highlighting</a>.

As well as standard desktop <a href="/wiki/Integrated_development_environment" title="Integrated development environment">integrated development environments</a> including PyCharm, IntelliJ Idea, Visual Studio Code etc, there are <a href="/wiki/Web_browser" title="Web browser">web browser</a>-based IDEs, including <a href="/wiki/SageMath" title="SageMath">SageMath</a>, for developing science- and math-related programs; <a href="/wiki/PythonAnywhere" title="PythonAnywhere">PythonAnywhere</a>, a browser-based IDE and hosting environment; and Canopy IDE, a commercial IDE emphasizing <a href="/wiki/Scientific_computing" class="mw-redirect" title="Scientific computing">scientific computing</a>.<sup id="cite_ref-130" class="reference"><a href="#cite_note-130">&#91;130&#93;</a></sup>

<a href="/wiki/CPython" title="CPython">CPython</a> is the <a href="/wiki/Reference_implementation" title="Reference implementation">reference implementation</a> of Python. It is written in C, meeting the <a href="/wiki/C89_(C_version)" class="mw-redirect" title="C89 (C version)">C89</a> standard (Python 3.11 uses <a href="/wiki/C11_(C_standard_revision)" title="C11 (C standard revision)">C11</a><sup id="cite_ref-131" class="reference"><a href="#cite_note-131">&#91;131&#93;</a></sup>) with several select <a href="/wiki/C99" title="C99">C99</a> features. CPython includes its own C extensions, but third-party extensions are not limited to older C versions—e.g. they can be implemented with <a href="/wiki/C11_(C_standard_revision)" title="C11 (C standard revision)">C11</a> or C++.<sup id="cite_ref-132" class="reference"><a href="#cite_note-132">&#91;132&#93;</a></sup><sup id="cite_ref-AutoNT-66_133-0" class="reference"><a href="#cite_note-AutoNT-66-133">&#91;133&#93;</a></sup>) It <a href="/wiki/Compiler" title="Compiler">compiles</a> Python programs into an intermediate <a href="/wiki/Bytecode" title="Bytecode">bytecode</a><sup id="cite_ref-AutoNT-67_134-0" class="reference"><a href="#cite_note-AutoNT-67-134">&#91;134&#93;</a></sup> which is then executed by its <a href="/wiki/Virtual_machine" title="Virtual machine">virtual machine</a>.<sup id="cite_ref-AutoNT-68_135-0" class="reference"><a href="#cite_note-AutoNT-68-135">&#91;135&#93;</a></sup> CPython is distributed with a large standard library written in a mixture of C and native Python, and is available for many platforms, including Windows (starting with Python&#160;3.9, the Python installer deliberately fails to install on <a href="/wiki/Windows_7" title="Windows 7">Windows 7</a> and 8;<sup id="cite_ref-136" class="reference"><a href="#cite_note-136">&#91;136&#93;</a></sup><sup id="cite_ref-137" class="reference"><a href="#cite_note-137">&#91;137&#93;</a></sup> <a href="/wiki/Windows_XP" title="Windows XP">Windows XP</a> was supported until Python&#160;3.5) and most modern <a href="/wiki/Unix-like" title="Unix-like">Unix-like</a> systems, including macOS (and <a href="/wiki/Apple_M1" title="Apple M1">Apple M1</a> Macs, since Python&#160;3.9.1, with experimental installer) and unofficial support for e.g. <a href="/wiki/OpenVMS" title="OpenVMS">VMS</a>.<sup id="cite_ref-138" class="reference"><a href="#cite_note-138">&#91;138&#93;</a></sup> Platform portability was one of its earliest priorities.<sup id="cite_ref-AutoNT-69_139-0" class="reference"><a href="#cite_note-AutoNT-69-139">&#91;139&#93;</a></sup> (During Python&#160;1 and 2 development, even <a href="/wiki/OS/2" title="OS/2">OS/2</a> and <a href="/wiki/Solaris_(operating_system)" class="mw-redirect" title="Solaris (operating system)">Solaris</a> were supported,<sup id="cite_ref-140" class="reference"><a href="#cite_note-140">&#91;140&#93;</a></sup> but support has since been dropped for many platforms.)

Other just-in-time Python compilers have been developed, but are now unsupported:

There are several compilers/<a href="/wiki/Transpiler" class="mw-redirect" title="Transpiler">transpilers</a> to high-level object languages, with either unrestricted Python, a restricted subset of Python, or a language similar to Python as the source language:

Specialized:

Older projects (or not to be used with Python 3.x and latest syntax):

Performance comparison of various Python implementations on a non-numerical (combinatorial) workload was presented at EuroSciPy '13.<sup id="cite_ref-168" class="reference"><a href="#cite_note-168">&#91;168&#93;</a></sup> Python's performance compared to other programming languages is also benchmarked by <a href="/wiki/The_Computer_Language_Benchmarks_Game" title="The Computer Language Benchmarks Game">The Computer Language Benchmarks Game</a>.<sup id="cite_ref-169" class="reference"><a href="#cite_note-169">&#91;169&#93;</a></sup>

Python's development is conducted largely through the <i>Python Enhancement Proposal</i> (PEP) process, the primary mechanism for proposing major new features, collecting community input on issues, and documenting Python design decisions.<sup id="cite_ref-PepCite000_170-0" class="reference"><a href="#cite_note-PepCite000-170">&#91;170&#93;</a></sup> Python coding style is covered in PEP&#160;8.<sup id="cite_ref-171" class="reference"><a href="#cite_note-171">&#91;171&#93;</a></sup> Outstanding PEPs are reviewed and commented on by the Python community and the steering council.<sup id="cite_ref-PepCite000_170-1" class="reference"><a href="#cite_note-PepCite000-170">&#91;170&#93;</a></sup>

Enhancement of the language corresponds with the development of the CPython reference implementation. The mailing list python-dev is the primary forum for the language's development. Specific issues were originally discussed in the <a href="/wiki/Roundup_(issue_tracker)" title="Roundup (issue tracker)">Roundup</a> <a href="/wiki/Bug_tracker" class="mw-redirect" title="Bug tracker">bug tracker</a> hosted at by the foundation.<sup id="cite_ref-AutoNT-21_172-0" class="reference"><a href="#cite_note-AutoNT-21-172">&#91;172&#93;</a></sup> In 2022, all issues and discussions were migrated to <a href="/wiki/GitHub" title="GitHub">GitHub</a>.<sup id="cite_ref-173" class="reference"><a href="#cite_note-173">&#91;173&#93;</a></sup> Development originally took place on a <a href="/wiki/Self-hosting_(web_services)" title="Self-hosting (web services)">self-hosted</a> source-code repository running <a href="/wiki/Mercurial" title="Mercurial">Mercurial</a>, until Python moved to <a href="/wiki/GitHub" title="GitHub">GitHub</a> in January 2017.<sup id="cite_ref-py_dev_guide_174-0" class="reference"><a href="#cite_note-py_dev_guide-174">&#91;174&#93;</a></sup>

CPython's public releases come in three types, distinguished by which part of the version number is incremented:

Many <a href="/wiki/Beta_release" class="mw-redirect" title="Beta release">alpha, beta, and release-candidates</a> are also released as previews and for testing before final releases. Although there is a rough schedule for each release, they are often delayed if the code is not ready. Python's development team monitors the state of the code by running the large <a href="/wiki/Unit_test" class="mw-redirect" title="Unit test">unit test</a> suite during development.<sup id="cite_ref-AutoNT-23_180-0" class="reference"><a href="#cite_note-AutoNT-23-180">&#91;180&#93;</a></sup>

The major <a href="/wiki/Academic_conference" title="Academic conference">academic conference</a> on Python is <a href="/wiki/PyCon" class="mw-redirect" title="PyCon">PyCon</a>. There are also special Python mentoring programs, such as <a href="/wiki/PyLadies" title="PyLadies">PyLadies</a>.

Python 3.12 removed <code>wstr</code> meaning Python extensions<sup id="cite_ref-181" class="reference"><a href="#cite_note-181">&#91;181&#93;</a></sup> need to be modified,<sup id="cite_ref-182" class="reference"><a href="#cite_note-182">&#91;182&#93;</a></sup> and 3.10 added <a href="/wiki/Pattern_matching" title="Pattern matching">pattern matching</a> to the language.<sup id="cite_ref-183" class="reference"><a href="#cite_note-183">&#91;183&#93;</a></sup>

Python 3.12 dropped some outdated modules, and more will be dropped in the future, deprecated as of 3.13; already deprecated array 'u' format code will emit <code>DeprecationWarning</code> since 3.13 and will be removed in Python 3.16. The 'w' format code should be used instead. Part of ctypes is also deprecated and <code>http.server.CGIHTTPRequestHandler</code> will emit a DeprecationWarning, and will be removed in 3.15. Using that code already has a high potential for both security and functionality bugs. Parts of the typing module are deprecated, e.g. creating a <code>typing.NamedTuple</code> class using keyword arguments to denote the fields and such (and more) will be disallowed in Python 3.15.

Tools that can generate documentation for Python API include <a href="/wiki/Pydoc" title="Pydoc">pydoc</a> (available as part of the standard library), <a href="/wiki/Sphinx_(documentation_generator)" title="Sphinx (documentation generator)">Sphinx</a>, <a href="/wiki/Pdoc" title="Pdoc">Pdoc</a> and its forks, <a href="/wiki/Doxygen" title="Doxygen">Doxygen</a> and <a href="/wiki/Graphviz" title="Graphviz">Graphviz</a>, among others.<sup id="cite_ref-184" class="reference"><a href="#cite_note-184">&#91;184&#93;</a></sup>

Python's name is derived from the British comedy group <a href="/wiki/Monty_Python" title="Monty Python">Monty Python</a>, whom Python creator Guido van Rossum enjoyed while developing the language. Monty Python references appear frequently in Python code and culture;<sup id="cite_ref-tutorial-chapter1_185-0" class="reference"><a href="#cite_note-tutorial-chapter1-185">&#91;185&#93;</a></sup> for example, the <a href="/wiki/Metasyntactic_variable" title="Metasyntactic variable">metasyntactic variables</a> often used in Python literature are <a href="/wiki/Spam_(Monty_Python)" class="mw-redirect" title="Spam (Monty Python)"><i>spam</i> and <i>eggs</i></a> instead of the traditional <a href="/wiki/Foobar" title="Foobar"><i>foo</i> and <i>bar</i></a>.<sup id="cite_ref-tutorial-chapter1_185-1" class="reference"><a href="#cite_note-tutorial-chapter1-185">&#91;185&#93;</a></sup><sup id="cite_ref-AutoNT-26_186-0" class="reference"><a href="#cite_note-AutoNT-26-186">&#91;186&#93;</a></sup> The official Python documentation also contains various references to Monty Python routines.<sup id="cite_ref-187" class="reference"><a href="#cite_note-187">&#91;187&#93;</a></sup><sup id="cite_ref-188" class="reference"><a href="#cite_note-188">&#91;188&#93;</a></sup> Users of Python are sometimes referred to as "Pythonistas".<sup id="cite_ref-introducing_python_189-0" class="reference"><a href="#cite_note-introducing_python-189">&#91;189&#93;</a></sup>

The prefix <i>Py-</i> is used to show that something is related to Python. Examples of the use of this prefix in names of Python applications or libraries include <a href="/wiki/Pygame" title="Pygame">Pygame</a>, a <a href="/wiki/Language_binding" title="Language binding">binding</a> of <a href="/wiki/Simple_DirectMedia_Layer" title="Simple DirectMedia Layer">SDL</a> to Python (commonly used to create games); <a href="/wiki/PyQt" title="PyQt">PyQt</a> and <a href="/wiki/PyGTK" title="PyGTK">PyGTK</a>, which bind <a href="/wiki/Qt_(software)" title="Qt (software)">Qt</a> and GTK to Python respectively; and <a href="/wiki/PyPy" title="PyPy">PyPy</a>, a Python implementation originally written in Python.

Since 2003, Python has consistently ranked in the top ten most popular programming languages in the <a href="/wiki/TIOBE_Programming_Community_Index" class="mw-redirect" title="TIOBE Programming Community Index">TIOBE Programming Community Index</a> where as of December&#160;2022<sup class="plainlinks noexcerpt noprint asof-tag update" style="display:none;"><a class="external text" href="https://en.wikipedia.org/w/index.php?title=Python_(programming_language)&amp;action=edit">&#91;update&#93;</a></sup> it was the most popular language (ahead of C, C++, and <a href="/wiki/Java_(programming_language)" title="Java (programming language)">Java</a>).<sup id="cite_ref-tiobecurrent_38-1" class="reference"><a href="#cite_note-tiobecurrent-38">&#91;38&#93;</a></sup> It was selected Programming Language of the Year (for "the highest rise in ratings in a year") in 2007, 2010, 2018, and 2020 (the only language to have done so four times as of 2020<sup class="plainlinks noexcerpt noprint asof-tag update" style="display:none;"><a class="external text" href="https://en.wikipedia.org/w/index.php?title=Python_(programming_language)&amp;action=edit">&#91;update&#93;</a></sup><sup id="cite_ref-190" class="reference"><a href="#cite_note-190">&#91;190&#93;</a></sup>).

An empirical study found that scripting languages, such as Python, are more productive than conventional languages, such as C and Java, for programming problems involving string manipulation and search in a dictionary, and determined that memory consumption was often "better than Java and not much worse than C or C++".<sup id="cite_ref-AutoNT-28_191-0" class="reference"><a href="#cite_note-AutoNT-28-191">&#91;191&#93;</a></sup>

Large organizations that use Python include <a href="/wiki/Wikipedia" title="Wikipedia">Wikipedia</a>, <a href="/wiki/Google" title="Google">Google</a>,<sup id="cite_ref-quotes-about-python_192-0" class="reference"><a href="#cite_note-quotes-about-python-192">&#91;192&#93;</a></sup> <a href="/wiki/Yahoo!" title="Yahoo!">Yahoo!</a>,<sup id="cite_ref-AutoNT-29_193-0" class="reference"><a href="#cite_note-AutoNT-29-193">&#91;193&#93;</a></sup> <a href="/wiki/CERN" title="CERN">CERN</a>,<sup id="cite_ref-AutoNT-30_194-0" class="reference"><a href="#cite_note-AutoNT-30-194">&#91;194&#93;</a></sup> <a href="/wiki/NASA" title="NASA">NASA</a>,<sup id="cite_ref-AutoNT-31_195-0" class="reference"><a href="#cite_note-AutoNT-31-195">&#91;195&#93;</a></sup> <a href="/wiki/Facebook" title="Facebook">Facebook</a>,<sup id="cite_ref-196" class="reference"><a href="#cite_note-196">&#91;196&#93;</a></sup> <a href="/wiki/Amazon_(company)" title="Amazon (company)">Amazon</a>, <a href="/wiki/Instagram" title="Instagram">Instagram</a>,<sup id="cite_ref-197" class="reference"><a href="#cite_note-197">&#91;197&#93;</a></sup> <a href="/wiki/Spotify" title="Spotify">Spotify</a>,<sup id="cite_ref-198" class="reference"><a href="#cite_note-198">&#91;198&#93;</a></sup> and some smaller entities like <a href="/wiki/Industrial_Light_%26_Magic" title="Industrial Light &amp; Magic">ILM</a><sup id="cite_ref-AutoNT-32_199-0" class="reference"><a href="#cite_note-AutoNT-32-199">&#91;199&#93;</a></sup> and <a href="/wiki/ITA_Software" title="ITA Software">ITA</a>.<sup id="cite_ref-AutoNT-33_200-0" class="reference"><a href="#cite_note-AutoNT-33-200">&#91;200&#93;</a></sup> The social news networking site <a href="/wiki/Reddit" title="Reddit">Reddit</a> was written mostly in Python.<sup id="cite_ref-201" class="reference"><a href="#cite_note-201">&#91;201&#93;</a></sup>

Python can serve as a <a href="/wiki/Scripting_language" title="Scripting language">scripting language</a> for <a href="/wiki/Web_application" title="Web application">web applications</a>, e.g. via <a href="/wiki/Mod_wsgi" title="Mod wsgi">mod_wsgi</a> for the <a href="/wiki/Apache_webserver" class="mw-redirect" title="Apache webserver">Apache webserver</a>.<sup id="cite_ref-AutoNT-35_202-0" class="reference"><a href="#cite_note-AutoNT-35-202">&#91;202&#93;</a></sup> With <a href="/wiki/Web_Server_Gateway_Interface" title="Web Server Gateway Interface">Web Server Gateway Interface</a>, a standard API has evolved to facilitate these applications. <a href="/wiki/Web_framework" title="Web framework">Web frameworks</a> like <a href="/wiki/Django_(web_framework)" title="Django (web framework)">Django</a>, <a href="/wiki/Pylons_(web_framework)" class="mw-redirect" title="Pylons (web framework)">Pylons</a>, <a href="/wiki/Pyramid_(web_framework)" class="mw-redirect" title="Pyramid (web framework)">Pyramid</a>, <a href="/wiki/TurboGears" title="TurboGears">TurboGears</a>, <a href="/wiki/Web2py" title="Web2py">web2py</a>, <a href="/wiki/Tornado_(web_server)" title="Tornado (web server)">Tornado</a>, <a href="/wiki/Flask_(web_framework)" title="Flask (web framework)">Flask</a>, Bottle, and <a href="/wiki/Zope" title="Zope">Zope</a> support developers in the design and maintenance of complex applications. Pyjs and <a href="/wiki/IronPython" title="IronPython">IronPython</a> can be used to develop the client-side of Ajax-based applications. <a href="/wiki/SQLAlchemy" title="SQLAlchemy">SQLAlchemy</a> can be used as a <a href="/wiki/Data_mapper_pattern" title="Data mapper pattern">data mapper</a> to a relational database. <a href="/wiki/Twisted_(software)" title="Twisted (software)">Twisted</a> is a framework to program communications between computers, and is used (for example) by <a href="/wiki/Dropbox_(service)" class="mw-redirect" title="Dropbox (service)">Dropbox</a>.

Libraries such as <a href="/wiki/NumPy" title="NumPy">NumPy</a>, <a href="/wiki/SciPy" title="SciPy">SciPy</a> and <a href="/wiki/Matplotlib" title="Matplotlib">Matplotlib</a> allow the effective use of Python in scientific computing,<sup id="cite_ref-cise_203-0" class="reference"><a href="#cite_note-cise-203">&#91;203&#93;</a></sup><sup id="cite_ref-millman_204-0" class="reference"><a href="#cite_note-millman-204">&#91;204&#93;</a></sup> with specialized libraries such as <a href="/wiki/Biopython" title="Biopython">Biopython</a> and <a href="/wiki/Astropy" title="Astropy">Astropy</a> providing domain-specific functionality. <a href="/wiki/SageMath" title="SageMath">SageMath</a> is a <a href="/wiki/Computer_algebra_system" title="Computer algebra system">computer algebra system</a> with a <a href="/wiki/Notebook_interface" title="Notebook interface">notebook interface</a> programmable in Python: its library covers many aspects of <a href="/wiki/Mathematics" title="Mathematics">mathematics</a>, including <a href="/wiki/Algebra" title="Algebra">algebra</a>, <a href="/wiki/Combinatorics" title="Combinatorics">combinatorics</a>, <a href="/wiki/Numerical_mathematics" class="mw-redirect" title="Numerical mathematics">numerical mathematics</a>, <a href="/wiki/Number_theory" title="Number theory">number theory</a>, and <a href="/wiki/Calculus" title="Calculus">calculus</a>.<sup id="cite_ref-ICSE_205-0" class="reference"><a href="#cite_note-ICSE-205">&#91;205&#93;</a></sup> <a href="/wiki/OpenCV" title="OpenCV">OpenCV</a> has Python bindings with a rich set of features for <a href="/wiki/Computer_vision" title="Computer vision">computer vision</a> and <a href="/wiki/Digital_image_processing" title="Digital image processing">image processing</a>.<sup id="cite_ref-206" class="reference"><a href="#cite_note-206">&#91;206&#93;</a></sup>

Python is commonly used in <a href="/wiki/Artificial_intelligence" title="Artificial intelligence">artificial intelligence</a> projects and machine learning projects with the help of libraries like <a href="/wiki/TensorFlow" title="TensorFlow">TensorFlow</a>, <a href="/wiki/Keras" title="Keras">Keras</a>, <a href="/wiki/PyTorch" title="PyTorch">Pytorch</a>, <a href="/wiki/Scikit-learn" title="Scikit-learn">scikit-learn</a> and the Logic language <a href="/wiki/ProbLog" title="ProbLog">ProbLog</a>.<sup id="cite_ref-whitepaper2015_207-0" class="reference"><a href="#cite_note-whitepaper2015-207">&#91;207&#93;</a></sup><sup id="cite_ref-208" class="reference"><a href="#cite_note-208">&#91;208&#93;</a></sup><sup id="cite_ref-209" class="reference"><a href="#cite_note-209">&#91;209&#93;</a></sup><sup id="cite_ref-210" class="reference"><a href="#cite_note-210">&#91;210&#93;</a></sup><sup id="cite_ref-ProbLogConcepts_211-0" class="reference"><a href="#cite_note-ProbLogConcepts-211">&#91;211&#93;</a></sup> As a scripting language with a <a href="/wiki/Modular_programming" title="Modular programming">modular architecture</a>, simple syntax, and rich text processing tools, Python is often used for <a href="/wiki/Natural_language_processing" title="Natural language processing">natural language processing</a>.<sup id="cite_ref-AutoNT-47_212-0" class="reference"><a href="#cite_note-AutoNT-47-212">&#91;212&#93;</a></sup>

The combination of Python and <a href="/wiki/Prolog" title="Prolog">Prolog</a> has proved to be particularly useful for AI applications, with Prolog providing knowledge representation and reasoning capablities. The Janus system, in particular, exploits the similarites between these two languages,
in part because of their use of dynamic typing, and the simple recursive nature of their
data structures. Typical applications of this combination include  natural language processing, visual query
answering, geospatial reasoning, and handling of semantic web data.<sup id="cite_ref-213" class="reference"><a href="#cite_note-213">&#91;213&#93;</a></sup>
The Natlog system, implemented in Python, uses <a href="/wiki/Definite_clause_grammar" title="Definite clause grammar">Definite Clause Grammars</a> (DCGs) as prompt generators for text-to-text generators like GPT3 and text-to-image generators like DALL-E or Stable Diffusion.<sup id="cite_ref-214" class="reference"><a href="#cite_note-214">&#91;214&#93;</a></sup>

Python can also be used for <a href="/wiki/Graphical_user_interface" title="Graphical user interface">graphical user interface</a> (GUI) by using libraries like <a href="/wiki/Tkinter" title="Tkinter">Tkinter</a>.<sup id="cite_ref-215" class="reference"><a href="#cite_note-215">&#91;215&#93;</a></sup><sup id="cite_ref-216" class="reference"><a href="#cite_note-216">&#91;216&#93;</a></sup>

Python can also be used to create games, with libraries such as <a href="/wiki/Pygame" title="Pygame">Pygame</a>, which can make 2D games.

Python has been successfully embedded in many software products as a scripting language, including in <a href="/wiki/Finite_element_method" title="Finite element method">finite element method</a> software such as <a href="/wiki/Abaqus" title="Abaqus">Abaqus</a>, 3D parametric modelers like <a href="/wiki/FreeCAD" title="FreeCAD">FreeCAD</a>, 3D animation packages such as <a href="/wiki/3ds_Max" class="mw-redirect" title="3ds Max">3ds Max</a>, <a href="/wiki/Blender_(software)" title="Blender (software)">Blender</a>, <a href="/wiki/Cinema_4D" title="Cinema 4D">Cinema 4D</a>, <a href="/wiki/LightWave_3D" title="LightWave 3D">Lightwave</a>, <a href="/wiki/Houdini_(software)" title="Houdini (software)">Houdini</a>, <a href="/wiki/Maya_(software)" class="mw-redirect" title="Maya (software)">Maya</a>, <a href="/wiki/Modo_(software)" title="Modo (software)">modo</a>, <a href="/wiki/MotionBuilder" class="mw-redirect" title="MotionBuilder">MotionBuilder</a>, <a href="/wiki/Autodesk_Softimage" title="Autodesk Softimage">Softimage</a>, the visual effects compositor <a href="/wiki/Nuke_(software)" title="Nuke (software)">Nuke</a>, 2D imaging programs like <a href="/wiki/GIMP" title="GIMP">GIMP</a>,<sup id="cite_ref-217" class="reference"><a href="#cite_note-217">&#91;217&#93;</a></sup> <a href="/wiki/Inkscape" title="Inkscape">Inkscape</a>, <a href="/wiki/Scribus" title="Scribus">Scribus</a> and <a href="/wiki/Paint_Shop_Pro" class="mw-redirect" title="Paint Shop Pro">Paint Shop Pro</a>,<sup id="cite_ref-AutoNT-38_218-0" class="reference"><a href="#cite_note-AutoNT-38-218">&#91;218&#93;</a></sup> and <a href="/wiki/Musical_notation" title="Musical notation">musical notation</a> programs like <a href="/wiki/Scorewriter" title="Scorewriter">scorewriter</a> and <a href="/wiki/Capella_(notation_program)" title="Capella (notation program)">capella</a>. <a href="/wiki/GNU_Debugger" title="GNU Debugger">GNU Debugger</a> uses Python as a <a href="/wiki/Prettyprint" title="Prettyprint">pretty printer</a> to show complex structures such as C++ containers. <a href="/wiki/Esri" title="Esri">Esri</a> promotes Python as the best choice for writing scripts in <a href="/wiki/ArcGIS" title="ArcGIS">ArcGIS</a>.<sup id="cite_ref-AutoNT-39_219-0" class="reference"><a href="#cite_note-AutoNT-39-219">&#91;219&#93;</a></sup> It has also been used in several video games,<sup id="cite_ref-AutoNT-40_220-0" class="reference"><a href="#cite_note-AutoNT-40-220">&#91;220&#93;</a></sup><sup id="cite_ref-AutoNT-41_221-0" class="reference"><a href="#cite_note-AutoNT-41-221">&#91;221&#93;</a></sup> and has been adopted as first of the three available <a href="/wiki/Programming_language" title="Programming language">programming languages</a> in <a href="/wiki/Google_App_Engine" title="Google App Engine">Google App Engine</a>, the other two being <a href="/wiki/Java_(software_platform)" title="Java (software platform)">Java</a> and <a href="/wiki/Go_(programming_language)" title="Go (programming language)">Go</a>.<sup id="cite_ref-AutoNT-42_222-0" class="reference"><a href="#cite_note-AutoNT-42-222">&#91;222&#93;</a></sup>

Many operating systems include Python as a standard component. It ships with most <a href="/wiki/Linux_distribution" title="Linux distribution">Linux distributions</a>,<sup id="cite_ref-223" class="reference"><a href="#cite_note-223">&#91;223&#93;</a></sup> <a href="/wiki/AmigaOS_4" title="AmigaOS 4">AmigaOS 4</a> (using Python&#160;2.7), <a href="/wiki/FreeBSD" title="FreeBSD">FreeBSD</a> (as a package), <a href="/wiki/NetBSD" title="NetBSD">NetBSD</a>, and <a href="/wiki/OpenBSD" title="OpenBSD">OpenBSD</a> (as a package) and can be used from the command line (terminal). Many Linux distributions use installers written in Python: <a href="/wiki/Ubuntu_(operating_system)" class="mw-redirect" title="Ubuntu (operating system)">Ubuntu</a> uses the <a href="/wiki/Ubiquity_(software)" title="Ubiquity (software)">Ubiquity</a> installer, while <a href="/wiki/Red_Hat_Linux" title="Red Hat Linux">Red Hat Linux</a> and <a href="/wiki/Fedora_Linux" title="Fedora Linux">Fedora Linux</a> use the <a href="/wiki/Anaconda_(installer)" title="Anaconda (installer)">Anaconda</a> installer. <a href="/wiki/Gentoo_Linux" title="Gentoo Linux">Gentoo Linux</a> uses Python in its <a href="/wiki/Package_management_system" class="mw-redirect" title="Package management system">package management system</a>, <a href="/wiki/Portage_(software)" title="Portage (software)">Portage</a>.

Python is used extensively in the <a href="/wiki/Information_security" title="Information security">information security</a> industry, including in exploit development.<sup id="cite_ref-AutoNT-49_224-0" class="reference"><a href="#cite_note-AutoNT-49-224">&#91;224&#93;</a></sup><sup id="cite_ref-AutoNT-50_225-0" class="reference"><a href="#cite_note-AutoNT-50-225">&#91;225&#93;</a></sup>

Most of the <a href="/wiki/Sugar_(software)" class="mw-redirect" title="Sugar (software)">Sugar</a> software for the <a href="/wiki/One_Laptop_per_Child" title="One Laptop per Child">One Laptop per Child</a> XO, developed at <a href="/wiki/Sugar_Labs" title="Sugar Labs">Sugar Labs</a> as of 2008<sup class="plainlinks noexcerpt noprint asof-tag update" style="display:none;"><a class="external text" href="https://en.wikipedia.org/w/index.php?title=Python_(programming_language)&amp;action=edit">&#91;update&#93;</a></sup>, is written in Python.<sup id="cite_ref-AutoNT-51_226-0" class="reference"><a href="#cite_note-AutoNT-51-226">&#91;226&#93;</a></sup> The <a href="/wiki/Raspberry_Pi" title="Raspberry Pi">Raspberry Pi</a> <a href="/wiki/Single-board_computer" title="Single-board computer">single-board computer</a> project has adopted Python as its main user-programming language.

<a href="/wiki/LibreOffice" title="LibreOffice">LibreOffice</a> includes Python and intends to replace Java with Python. Its Python Scripting Provider is a core feature<sup id="cite_ref-227" class="reference"><a href="#cite_note-227">&#91;227&#93;</a></sup> since Version 4.0 from 7 February 2013.

Python's design and philosophy have influenced many other programming languages:

Python's development practices have also been emulated by other languages. For example, the practice of requiring a document describing the rationale for, and issues surrounding, a change to the language (in Python, a PEP) is also used in <a href="/wiki/Tcl" title="Tcl">Tcl</a>,<sup id="cite_ref-AutoNT-99_239-0" class="reference"><a href="#cite_note-AutoNT-99-239">&#91;239&#93;</a></sup> <a href="/wiki/Erlang_(programming_language)" title="Erlang (programming language)">Erlang</a>,<sup id="cite_ref-AutoNT-100_240-0" class="reference"><a href="#cite_note-AutoNT-100-240">&#91;240&#93;</a></sup> and Swift.<sup id="cite_ref-241" class="reference"><a href="#cite_note-241">&#91;241&#93;</a></sup>
